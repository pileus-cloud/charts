image:
  repository: public.ecr.aws/i5o6o6d7/k8s-metrics-agent
  pullPolicy: IfNotPresent
  tag: "0.3.5"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

## workload type: Deployment or CronJob
workload: CronJob

CronJob:
  schedule: "0 * * * *"
  concurrencyPolicy: Forbid
  startingDeadlineSeconds: 15
  failedJobsHistoryLimit: 3
  successfulJobsHistoryLimit: 3
  activeDeadlineSeconds: 14400
  ## -- Valid values: "OnFailure", "Never"
  restartPolicy: "Never"
  backoffLimit: 0

serviceAccount:
  ## Specifies whether a service account should be created
  create: true
  ## Annotations to add to the service account
  annotations: {}
  ## The name of the service account to use.
  ## If not set and create is true, a name is generated using the fullname template
  name: ""

environmentVars:
  ## Type could be 'secret' or 'env'
  type: env

environment:
  ## ========= PLACE YOUR OWN VALUES HERE: =========

  ## should match the name of the cluster in your cloud
  CLUSTER_NAME: '<name of the cluster the chart is being installed to>'

  ACCOUNT_ID: '<ID of your AWS root account>'
  LINKED_ACCOUNT_ID: '<ID of your AWS linked account which owns the cluster>'

  CLOUD_PROVIDER: 'aws'

  ## Provided by Anodot:
  # ROLE_ARN: '<role ARN to access Anodot AWS>'
  # AWS_ACCESS_KEY_ID: '<access key for Anodot AWS>'
  # AWS_SECRET_ACCESS_KEY: '<secret access key for Anodot AWS>'

  ## Prometheus or Thanos URL, might be different for your cluster depending on the service name, namespace and port
  PROMETHEUS_URL: 'http://prometheus-kube-prometheus-prometheus:9090'

  ## When using Thanos specify a condition, that will filter results by labels, to fetch data only of a specific cluster
  # METRIC_CONDITION: 'cluster="cluster_name"'

  ## Needed only for the Deployment workload
  # CRON_SCHEDULE: : "0 * * * *"

  ## ========= THE NEXT VALUES USUALLY DO NOT NEED TO BE CHANGED =========

  ## Bucket name of the Anodot destination bucket
  S3_BUCKET: 'prod-prometheus-agent'
  
  ## Monitoring support coming soon
  MONITORING: 'none'

  LOG_TO_CLOUD_WATCH: 'true'

## Configure External-secrets
## Prerequisites: 
## 1. Install external-secrets 
## 2. Create SecretStore in the same k8s namespace before installing this helm chart (Details: https://external-secrets.io/v0.8.1/provider/aws-parameter-store/) 
## 3. Cloud secret must be created beforehand in JSON format (default for AWS SecretsManager) 
##  
## Example of SecretStore with AWS ParameterStore provider (should be applied as separate YAML manifest):
## apiVersion: external-secrets.io/v1beta1
## kind: SecretStore
## metadata:
##   name: anodot
##   namespace: anodot
## spec:
##   provider:
##   aws:
##   service: ParameterStore
##   region: us-east-1

externalSecret:
  enabled: false
  refreshInterval: 1h
  secretStoreRef:
    kind: SecretStore
    name: anodot
  target:
    name: anodot
  secrets:
    ## Secrets are created in cloud provider vault with JSON format: {"aws_access_key_id": "", "aws_secret_access_key": ""}
    ## Secrets are mapped to env vars AWS_ACCESS_KEY_ID/AWS_SECRET_ACCESS_KEY
    AWS_ACCESS_KEY_ID:
    ## key - secret name created beforehand in cloud provider vault
      key: env/secret_name_cloud
    ## property - key to get the value from JSON
      property: aws_access_key_id
    AWS_SECRET_ACCESS_KEY:
      key: env/secret_name_cloud
      property: aws_secret_access_key

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

resources: {}
  ## We usually recommend not to specify default resources and to leave this as a conscious
  ## choice for the user. This also increases chances charts run on environments with little
  ## resources, such as Minikube. If you do want to specify resources, uncomment the following
  ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

prometheusrule:
  enabled: false
  prometheus:
    namespace: default
    labels:
      release: prometheus
      app: kube-prometheus-stack
  groups:
    - name: k8s-metrics-collector
      rules:
        - record: node_memory_UsageTotal_bytes
          expr: node_memory_MemTotal_bytes - node_memory_MemFree_bytes
#          todo
#    - name: k8s-metrics-collector
#      rules:
#        - record: pod_memory_UsageTotal_bytes
#          expr: sum(container_memory_usage_bytes) by (node,pod)

configmap:
   enabled: false
   files:
   - mountPath: "/usr/src/app/src/agent/data/metric_queries.json"
     data:
       metric_queries: |-
          {
            "node_instances": "avg_over_time(node_dmi_info[%I%])",
            "node_properties": "avg_over_time(kube_node_info[%I%])",
            "node_cpu_limit": "avg_over_time(kube_node_status_capacity{resource='cpu'}[%I%]) * 1000",
            "node_cpu_request": "sum(avg_over_time(kube_pod_container_resource_requests{resource='cpu'}[%I%])) by (node) * 1000",
            "node_memory_limit": "avg_over_time(node_memory_MemTotal_bytes[%I%])",
            "node_memory_request": "sum(avg_over_time(kube_pod_container_resource_requests{resource='memory'}[%I%])) by (node)",
            "pod_properties": "avg_over_time(kube_pod_info[%I%])",
            "pod_number_of_containers": "sum(avg_over_time(kube_pod_container_info[%I%])) by (pod,namespace)",
            "pod_cpu_limit": "sum(avg_over_time(kube_pod_container_resource_limits{resource='cpu'}[%I%])) by (node,pod,namespace) * 1000",
            "pod_cpu_request": "sum(avg_over_time(kube_pod_container_resource_requests{resource='cpu'}[%I%])) by (node,pod,namespace) * 1000",
            "pod_cpu_usage_total": "sum(rate(container_cpu_usage_seconds_total[%I%])) by (node,pod,namespace) * 1000",
            "pod_memory_limit": "sum(avg_over_time(kube_pod_container_resource_limits{resource='memory'}[%I%])) by (node,pod,namespace)",
            "pod_memory_request": "sum(avg_over_time(kube_pod_container_resource_requests{resource='memory'}[%I%])) by (node,pod,namespace)",
            "pod_memory_usage": "sum(avg_over_time(container_memory_usage_bytes[%I%])) by (node,pod,namespace)",
            "pod_network_rx_bytes": "sum(rate(container_network_receive_bytes_total[%I%])) by (node,pod,namespace)",
            "pod_network_tx_bytes": "sum(rate(container_network_transmit_bytes_total[%I%])) by (node,pod,namespace)",
            "pod_labels": "avg_over_time(kube_pod_labels[%I%])",
            "pod_creation_timestamp": "kube_pod_created",
            "pod_completion_timestamp": "kube_pod_completion_time"
          }
