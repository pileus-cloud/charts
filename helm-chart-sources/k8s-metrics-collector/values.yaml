image:
  repository: public.ecr.aws/i5o6o6d7/k8s-metrics-agent
  pullPolicy: IfNotPresent
  tag: 0.3.16

# -----------------------------------------------------------------------------
# The following parameters should be configured according to your environment.
# Please make sure to replace any value that contains the 'INSERT' text, and
# also read the comments of other parameters and determine if they apply to
# your case.

environment:
  # The name of the K8S cluster, which should match its name in your cloud environment
  CLUSTER_NAME: '<INSERT CLUSTER NAME HERE>'

  # Root account ID: In AWS that's ID of the payer account. For Azure it's the name of the account in Anodot-Costs>'
  ACCOUNT_ID: '<INSERT ROOT ACCOUNT ID HERE>'

  # Cluster owner account ID: In AWS that's the linked account ID owning the cluster. In Azure that's the subscription ID.
  LINKED_ACCOUNT_ID: '<INSERT CLUSTER OWNER ACCOUNT ID HERE>'

  # Cloud provider. Valid options: 'aws' for AWS, 'azure' for Azure.
  CLOUD_PROVIDER: '<INSERT CLOUD PROVIDER HERE>'

  # Base URL to Prometheus or PromQL-compatible server (e.g. Thanos/Grafana), that has the query API endpoint.
  # This is the default path for Prometheus installation. Override this to match your environment.
  PROMETHEUS_URL: 'http://prometheus-kube-prometheus-prometheus:9090'

  # The following settings are relevant only in some cases. Set them when it applies to your case according to the
  # description. Do not set them when they are not required.

  # In case authentication is required to connect to the Prometheus query server, uncomment and set these user and password.
  #  USERNAME: ''
  #  PASSWORD: ''

  # In case special HTTP request headers are required by the Prometheus server, insert them in a JSON format as string.
  # A known case is a multi-tenant mode in some Grafana configurations that require the `X-Scope-OrgID` header (see the
  # example).
  #  REQUEST_HEADERS: '{"X-Scope-OrgID": "YOUR-TENANT-NAME"}'

  # The following can be used to override the default timeout for the request sent to the Prometheus server. Values are
  # in units of seconds. VALIDATION_REQUEST_TIMEOUT is used only in the initial stage of configuration validation to
  # test access to the server.
  #  VALIDATION_REQUEST_TIMEOUT = 5
  #  REQUEST_TIMEOUT = 300

  # A general condition that matches metrics relevant to this cluster.
  # This is required only in environments where metrics are stored from multiple clusters, so this conditions filters
  # out all the rest.
  #  METRIC_CONDITION: 'cluster="<INSERT CLUSTER NAME HERE>"'

  # Controlling queries of collecting maximum and quantile usage of resources (enabled by default).
  #  ENABLE_MAX_CPU_QUERIES: 'true'
  #  ENABLE_MAX_MEMORY_QUERIES: 'true'
  # Resolution for CPU quantile/maximum usage determination, in PromQL time duration notation ('5m', '30s', etc. Only a
  # single unit is allowed). Default value is 1 minute.
  # The optimal value for data accuracy is Prometheus scraping interval (15 seconds in many environments). The higher
  # (i.e. shorter) the value, the more performance impact this query might have in a highly-loaded environment.
  #  RESOLUTION: '1m'

  # Metrics collected from the agent are typically generated by jobs of the following names, which by default are set
  # during Prometheus installation. In case the name of the jobs is different in your environment, uncomment
  # and set them accordingly. If you want to remove the job filter entirely (required in case it's inconsistent, but
  # there's only one single job responsible for each pod's metric), explicitly set the value to an empty string: ''.
  #  KUBE_STATE_METRICS_JOB_NAME: 'kube-state-metrics'
  #  KUBELET_JOB_NAME: 'kubelet'

  # When workload of type Deployment is set (non-default), uncomment this (and leave the value as it is).
  # CRON_SCHEDULE: : "1 * * * *"


environmentSecrets:
  # Access key required for uploading collected metrics to Anodot (should be provided to you by Anodot)
  AWS_ACCESS_KEY_ID: '<INSERT ANODOT ACCESS KEY>'
  AWS_SECRET_ACCESS_KEY: '<INSERT ANODOT SECRET ACCESS KEY>'


# -----------------------------------------------------------------------------
# Modifying the following parameters is generally not required, and not
# recommended.
#

environmentVars:
  # type 'env' - secrets will be added from environmentSecrets to container as environment variables
  # type 'secret' - secrets will be added from environmentSecrets to Secret object and used in container as environment variables
  type: env

# Supported workload type: Deployment, CronJob.
# CronJob is the default way. Deployment is a persistent pod that schedules its work internally, and requires uncommenting environment.CRON_SCHEDULE.
workload: CronJob

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

CronJob:
  schedule: "1 * * * *"
  concurrencyPolicy: Forbid
  startingDeadlineSeconds: 15
  failedJobsHistoryLimit: 3
  successfulJobsHistoryLimit: 3
  activeDeadlineSeconds: 14400
  # -- Valid values: "OnFailure", "Never"
  restartPolicy: "Never"
  backoffLimit: 0

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

## Enabled environmentExternalSecrets takes precedence over settings in environmentVars and values in environmentSecrets
environmentExternalSecrets:
  enabled: false
  ## Provide secret name, it must be the same as defined in kind:ExternalSecret target.name, more details in README.md
  name: anodot-cost-secrets

resources: {}
  # The following settings were tested on ~100000 metrics. The agent might require a larger amount of resources in case
  # of having to process a larger amount of data.
  #  Limits:
  #    cpu:     100m
  #    memory:  500Mi
  #  Requests:
  #    cpu:     100m
  #    memory:  500Mi

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

nodeSelector: {}

tolerations: []

affinity: {}

prometheusrule:
  enabled: false

configmap:
   enabled: false